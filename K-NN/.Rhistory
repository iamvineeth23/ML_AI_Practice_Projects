print("Hello World!")
6+9
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/Logistic Regression")
#Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
View(dataset)
dataset2 = dataset[2:3]
View(dataset2)
dataset2 = dataset[3:5]
View(dataset2)
#Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
View(test_set)
View(training_set)
# Fitting Logistic Regression to the Training Set
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
View(classifier)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
prob_pred
prob_pred = predict(classifier, type = 'response', newdata = training_set[-3])
prob_pred
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
# Making the confusion Matrix
cm = table(test_set[,3], y_pred)
cm = table(test_set[,3], y_pred)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the confusion Matrix
cm = table(test_set[,3], y_pred)
cm
install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
X2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[,-3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))
View(grid_set)
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
X2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[,-3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/K-NN")
#Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Splitting dataset into training set and test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
library(class)
y_pred = knn(train = training_set[,-3],
test = test_set[-3],
cl = training_set[,3],
k = 5)
y_pred
# Making the confusion Matrix
cm = table(test_set[,3], y_pred)
cm
library(class)
y_pred = knn(train = training_set[,-3],
test = test_set[-3],
cl = training_set[,3],
k = 50)
# Making the confusion Matrix
cm = table(test_set[,3], y_pred)
cm
library(class)
y_pred = knn(train = training_set[,-3],
test = test_set[-3],
cl = training_set[,3],
k = 5)
# Making the confusion Matrix
cm = table(test_set[,3], y_pred)
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
X2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[,-3],
main = 'K-NN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
X2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[,-3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
X2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[,-3],
main = 'K-NN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
X2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[,-3],
test = grid_set,
cl = training_set[,3],
k = 5)
plot(set[,-3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[,3] == 1, 'green4', 'red3'))

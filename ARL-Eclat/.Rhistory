print("Hello World!")
6+9
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/K-Means Clustering")
# Importing the dataset
dataset <- read.csv("Mall_Customers.csv")
View(dataset)
View(dataset)
X <- dataset[4:5]
X = dataset[4:5]
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Cluster of clients'),
xlab = 'Number of clusters', ylab = 'WCSS')
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Cluster of clients'),
xlab = "Number of clusters", ylab = "WCSS")
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Cluster of clients'),
xlab = "Number of clusters", ylab = "WCSS")
#Applying k-means to dataset
set.seed(29)
kmeans <- kmeans(X, centers = 5, itern.max = 300,  nstart = 10)
#Applying k-means to dataset
set.seed(29)
kmeans <- kmeans(X, centers = 5, iter.max = 300,  nstart = 10)
library(cluster)
# Using the elbow method to find the optimal number of clusters
set.seed(6)
wcss <- vector()
for (i in 1:10) wcss[i] <- sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type = 'b', main = paste('Cluster of clients'),
xlab = "Number of clusters", ylab = "WCSS")
#Applying k-means to dataset
set.seed(29)
kmeans <- kmeans(X, centers = 5, iter.max = 300,  nstart = 10)
# Visualising the clusters
library(cluster)
clusplot(X,
kmeans$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of clients'),
xlab = "Annual Income",
ylab = "Spending Score")
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/Hierarchical Clustering")
# Importing the dataset
dataset = read.csv('Mall_Customers.csv')
View(dataset)
View(dataset)
View(dataset)
X = dataset[,4:5]
View(X)
View(X)
dendrogram = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
plot(dendrogram,
main = paste('Dendrogram'),
xlab = "Customers",
ylab = "Euclidean Distances")
# Fitting hierarchical clustering to the dataset
hc = hclust(dist(X, method = 'euclidean'), method = 'ward.D')
y_hc = cutree(tree = hc, k = 5)
y_hc
# Visualising the clusters
library(cluster)
clusplot(X,
y_hc,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = paste('Clusters of clients'),
xlab = "Annual Income",
ylab = "Spending Score")
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/ARL-Apriori")
dataset = read.csv('Market_Basket_Optimisation.csv')
View(dataset)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
View(dataset)
View(dataset)
install.packages("arules")
library('arules')
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',',
rm.duplicates = TRUE)
View(dataset)
summary(dataset)
itemFrequencyPlot(dataset, topN = 100)
itemFrequencyPlot(dataset, topN = 10)
itemFrequencyPlot(dataset, topN = 10) #dataset visualisation
summary(dataset)
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.8))
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.5))
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.4))
inspect(rules[1:10])
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.003, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
28/7500
# Training Apropri on the dataset
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/ARL-Eclat")
#Creating a sparse matrix for the dataset
library('arules')
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',',
rm.duplicates = TRUE)
# Training Eclat on the dataset
rules = eclat(data = dataset, parameter = list(support = 0.004, minlen = 2))
inspect(sort(rules, by = 'support')[1:10])
# Training Eclat on the dataset
rules = eclat(data = dataset, parameter = list(support = 0.003, minlen = 2))
# Visualising the results
inspect(sort(rules, by = 'support')[1:10])

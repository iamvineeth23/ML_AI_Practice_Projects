print("Hello World!")
6+9
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
setwd("~/Documents/Machine Learning/ML-R_and_Py/My_Trials/4")
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
y_pred = predict(lin_reg, newdata = 6.5)
lin_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
lin_reg = lm(formula = Salary ~ dataset$Level,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
setwd("~/Documents/Machine Learning/ML-R_and_Py/My_Trials/4")
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
y_pred = predict(lin_reg, data.frame(Level = 6.5))
lin_reg = lm(formula = Salary ~ dataset$Level,
data = dataset)
# Fitting Polynomial Regression to the dataset
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
y_pred = predict(lin_reg, data.frame(Level = 6.5))
lin_reg = lm(formula = Salary ~ dataset$Level,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
setwd("~/Documents/Machine Learning/ML-R_and_Py/My_Trials/4")
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ dataset$Level,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
# Predicting a new result with Linear Regression
predict(lin_reg, data.frame(Level = 6.5))
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
y_pred = predict(lin_reg, newdata = data.frame(Level = 6.5))
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Linear Regression)') +
xlab('Levels') +
ylab('Predicted Salary')
y_pred = predict(poly_reg, newdata = data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
setwd("~/Documents/Machine Learning/ML-R_and_Py/My_Trials/4")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/Support Vector Regression(SVR)")
install.packages('e1071')
library(e1071)
install.packages('e1071')
install.packages('e1071', dependencies = TRUE)
install.packages('e1071')
library(e1071)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
sv_reg = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
y_pred = predict(svr_reg, newdata = data.frame(Level = 6.5))
y_pred = predict(sv_reg, newdata = data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(sv_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(sv_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/Decision Tree Regression")
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
library(rpart)
decTree_reg = rpart(formula = Salary ~ .,
data = dataset)
y_pred = predict(regressor, newdata = data.frame(Level = 6.5))
y_pred = predict(decTree_reg, newdata = data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(decTree_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Decision Tree Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
library(rpart)
decTree_reg = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
y_pred = predict(decTree_reg, newdata = data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(decTree_reg, newdata = dataset)), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Decision Tree Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
# for getting smoother curves
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(decTree_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Decision Tree Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(decTree_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Decision Tree Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
decTree_reg = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 2))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(decTree_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Decision Tree Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
decTree_reg = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 0.5))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(decTree_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Decision Tree Regression Model)') +
xlab('Levels') +
ylab('Predicted Salary')
setwd("~/Documents/Machine Learning/Git/ML_AI_Practice_Projects/Random Forest Regression")
install.packages('randomForest')
#Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Fitting Random Forest Regression Model to the dataset
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 10)
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
# Visualising the Random Forest Regression Model
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(rf_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Random Forest Model)') +
xlab('Levels') +
ylab('Predicted Salary')
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(rf_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Random Forest Model)') +
xlab('Levels') +
ylab('Predicted Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(rf_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Random Forest Model)') +
xlab('Levels') +
ylab('Predicted Salary')
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 300)
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(rf_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Random Forest Model)') +
xlab('Levels') +
ylab('Predicted Salary')
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 100)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 500)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
rf_reg = randomForest(x = dataset[1], # gives x dataframe
y = dataset$Salary, # gives y vector
ntree = 500)
#Predicting the results with Random Forest Regression Model
y_pred = predict(rf_reg, newdata = data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = x_grid, y = predict(rf_reg, newdata = data.frame(Level = x_grid))), colour = 'blue') +
ggtitle('Predicted Salary vs Levels (Random Forest Model)') +
xlab('Levels') +
ylab('Predicted Salary')
